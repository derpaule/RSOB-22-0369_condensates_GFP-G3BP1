[["condensates.html", "Cellular and reconstituted condensates of G3BP1 mutants. 1 Info 2 Cellular condensate analysis 2.1 code chunks 2.2 Percentage of SG-positive cells and Cell count 2.3 Analysis of cellular and SG parameters 2.4 SGarea versus GFPin 3 analysis of LLPS 3.1 import data 3.2 LLPS condensate responses 3.3 LLPS condensates normalized to wild-type 3.4 Fit to normalized data 4 Final plot", " Cellular and reconstituted condensates of G3BP1 mutants. [Tim Schulte] 1 Info Supplemental data on DRYAD. The experimental data, initial Cellprofiler and data analysis was performed by MD Panas using Excel and Prism. This script was established to analyze how granule size depends on GFP expression levels. This was requested by one of the referees when we submitted our work initially to Molecular Cell. Cellprofiler pipelines were deposited on DRYAD. Note: Images w3 were offset from w2 images by 4px which was corrected using Fiji using batch processing - the macro file is also found on DRYAD. Other programs used: https://imagemagick.org/ to superimpose and automatically highlight/center picked cells library(ggplot2) library(tidyverse) library(plyr) library(tidyr) library(stringr) library(ggforce) library(readr) library(ggsci) library(knitr) library(bookdown) library(tinytex) library(kableExtra) library(DT) library(xfun) library(readxl) library(vroom) library(metR) library(reshape2) library(misc3d) library(ggforce) library(RColorBrewer) library(ggridges) library(ggforce) library(fitdistrplus) library(broom) library(KSgeneral) library(magrittr) library(sfsmisc) library(ks) library(rstatix) library(ggpubr) library(hexbin) library(egg) library(vroom) library(scales) library(drc) library(shades) library(sandwich) 2 Cellular condensate analysis inital data import. setting pixel area, defining plate numbers and experimental setup # image calibration value for both x, y px: 0.3225 um; area: (0.3225)^2 # red channel 4px up! pixel_size &lt;- 0.1613 area_um &lt;- (pixel_size)^2 %&gt;% round(., 3) pixel_area_norm &lt;- pixel_size/0.3225 npg_manual_scale_pre &lt;- as_tibble(pal_npg()(6)) %&gt;% add_column(., name = c(&quot;aWildtype_amock&quot;, &quot;aWildtype_bAS&quot;, &quot;bH31A_bAS&quot;, &quot;cH62A_bAS&quot;, &quot;dQ58E_bAS&quot;, &quot;eH31YH62Y_bAS&quot;)) npg_manual_scale_lighter &lt;- as_tibble(pal_npg()(6)) %&gt;% add_column(., name = c(&quot;aWildtype_amock&quot;, &quot;aWildtype_bAS&quot;, &quot;bH31A_bAS&quot;, &quot;cH62A_bAS&quot;, &quot;dQ58E_bAS&quot;, &quot;eH31YH62Y_bAS&quot;)) %&gt;% dplyr::mutate(., name = paste(name, &quot;_light&quot;, sep = &quot;&quot;), value = brightness(value, 0.8)) %&gt;% dplyr::mutate_at(c(&quot;value&quot;), ~as.character(.)) npg_manual_scale &lt;- npg_manual_scale_pre %&gt;% full_join(., npg_manual_scale_lighter) %&gt;% dplyr::select(., name, color = value) %&gt;% dplyr::select(., value = name, vame = color) %&gt;% deframe() Metadata_Well_correct_f &lt;- function(data){ data_out &lt;- data %&gt;% dplyr::select(., contains(&quot;Metadata_Well&quot;), !contains(&quot;Metadata_Well&quot;)) %&gt;% dplyr::select(., !c(2)) %&gt;% dplyr::rename(Metadata_Well = 1) return(data_out) } sum_objsel_f &lt;- function(df, datatype){ #print(df) #print(datatype) if (datatype == &quot;Cytoplasm_Norm&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., Metadata_Well, ObjectNumber, Children_SG_Count, CytoArea = AreaShape_Area) %&gt;% dplyr::group_by(., Metadata_Well, Children_SG_Count) %&gt;% dplyr::summarize(., Cellcount = n()) } else { if (datatype == &quot;SG&quot;) { df_sum &lt;- df %&gt;% dplyr::group_by(., Metadata_Well, Parent_Cytoplasm_Norm) %&gt;% dplyr::summarize(., SGcount = n(), AreaSum = sum(AreaShape_Area)) } else if (datatype == &quot;cell&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., Metadata_Well, ObjectNumber) %&gt;% dplyr::group_by(., Metadata_Well) %&gt;% dplyr::summarize(., Cellcount = n()) } else if (datatype == &quot;CaprinSG&quot;) { df_sum &lt;- df %&gt;% dplyr::group_by(., Metadata_Well, Parent_Cytoplasm_Norm) %&gt;% dplyr::summarize(., SGcount = n(), AreaSum = sum(AreaShape_Area)) } else { df_sum &lt;- &quot;none&quot; }} return(df_sum) } select_data_f &lt;- function(df, datatype){ if (datatype == &quot;Cytoplasm_Norm&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., ImageNumber, Metadata_Well, Parent_Cytoplasm_Norm = ObjectNumber, Children_SG_Count, CytoArea = AreaShape_Area, Intensity_MeanIntensity_GFP) %&gt;% dplyr::mutate(., ParentID = paste(Metadata_Well, ImageNumber, Parent_Cytoplasm_Norm, sep =&quot;_&quot;)) } else { if (datatype == &quot;SG&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., ImageNumber, Metadata_Well, Parent_Cytoplasm_Norm, SG_objnumber = ObjectNumber, SGarea = AreaShape_Area) %&gt;% dplyr::mutate(., ParentID = paste(Metadata_Well, ImageNumber, Parent_Cytoplasm_Norm, sep =&quot;_&quot;)) } else if (datatype == &quot;cell&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., ImageNumber, Metadata_Well, Parent_Cytoplasm_Norm = ObjectNumber, contains(&quot;AreaShape&quot;)) %&gt;% dplyr::mutate(., ParentID = paste(Metadata_Well, ImageNumber, Parent_Cytoplasm_Norm, sep =&quot;_&quot;)) } else if (datatype == &quot;CaprinSG&quot;) { df_sum &lt;- df %&gt;% dplyr::select(., ImageNumber, Metadata_Well, Parent_Cytoplasm_Norm, CaprinSG_objnumber = ObjectNumber, CaprinSGarea = AreaShape_Area) %&gt;% dplyr::mutate(., ParentID = paste(Metadata_Well, ImageNumber, Parent_Cytoplasm_Norm, sep =&quot;_&quot;)) } else { df_sum &lt;- &quot;none&quot; }} return(df_sum) } SG_nest_f &lt;- function(df){ df_out &lt;- df %&gt;% group_by(Metadata_Well, ParentID) %&gt;% nest(.) } SG_areasum_f &lt;- function(df){ SG_inside_test_f &lt;- function(df){ if (is_empty(df)) { area_out &lt;- 0 } else { area_out &lt;- df %&gt;% dplyr::select_at(., vars(contains(&quot;area&quot;))) %&gt;% dplyr::select(., area = c(1)) %&gt;% dplyr::summarize(., areaSUM = sum(area)) %&gt;% pull() } return(area_out) } df_out &lt;- df %&gt;% dplyr::mutate(., SGarea = purrr::map(SG, ~SG_inside_test_f(.)), CaprinSGarea = purrr::map(CaprinSG, ~SG_inside_test_f(.))) return(df_out) } cytoArea_min &lt;- 2000 cytoArea_max &lt;- 40000 plate_association &lt;- tribble(~plate, ~Metadata_Well, ~NTF2, ~condition, &quot;plate21851&quot;, &quot;A01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21851&quot;, &quot;B01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21851&quot;, &quot;B02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21851&quot;, &quot;B03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, &quot;plate21852&quot;, &quot;C01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21852&quot;, &quot;D01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21852&quot;, &quot;D02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21852&quot;, &quot;D03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, &quot;plate21711&quot;, &quot;A01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21711&quot;, &quot;B01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21711&quot;, &quot;B02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21711&quot;, &quot;B03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, &quot;plate21712&quot;, &quot;C01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21712&quot;, &quot;D01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21712&quot;, &quot;D02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21712&quot;, &quot;D03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, &quot;plate21691&quot;, &quot;A01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21691&quot;, &quot;B01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21691&quot;, &quot;B02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21691&quot;, &quot;B03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, &quot;plate21692&quot;, &quot;C01&quot;, &quot;aWildtype&quot;, &quot;amock&quot;, &quot;plate21692&quot;, &quot;D01&quot;, &quot;aWildtype&quot;, &quot;bAS&quot;, &quot;plate21692&quot;, &quot;D02&quot;, &quot;bH31A&quot;, &quot;bAS&quot;, &quot;plate21692&quot;, &quot;D03&quot;, &quot;cH31YH62Y&quot;, &quot;bAS&quot;) plate_pattern &lt;- &quot;plate(21691|21692|21851|21852|21711|21712)&quot; datasel_list = list.files(path = &quot;./data_sel&quot;, pattern = &quot;*&quot;, recursive = TRUE, include.dirs = TRUE, full.names = TRUE) datasel_list.tib &lt;- as_tibble(datasel_list) %&gt;% dplyr::mutate(., datatype = str_extract(value, &quot;(?&lt;=_)Cytoplasm_Norm|(?&lt;=_)SG|(?&lt;=_)cell|(?&lt;=_)CaprinSG&quot;), plate = str_extract(value, pattern = plate_pattern)) SG_datasel.tib &lt;- datasel_list.tib %&gt;% dplyr::mutate(., data = purrr::map(value, vroom)) %&gt;% dplyr::mutate(., data_meta = purrr::pmap(list(data), Metadata_Well_correct_f) ) %&gt;% dplyr::mutate(., data_sum = purrr::pmap(list(data_meta, datatype), sum_objsel_f), data_sel = purrr::pmap(list(data_meta, datatype), select_data_f) ) SG_datasel_long.tib &lt;- SG_datasel.tib %&gt;% dplyr::select(., plate, datatype, data_sel) %&gt;% pivot_wider(., id_cols = c(&quot;plate&quot;), names_from = c(&quot;datatype&quot;), values_from = c(&quot;data_sel&quot;)) %&gt;% dplyr::mutate(., CytoNormFiltered = purrr::map(Cytoplasm_Norm, ~dplyr::filter(., CytoArea &gt;cytoArea_min &amp; CytoArea &lt; cytoArea_max))) %&gt;% dplyr::mutate(., Cellcyto = purrr::pmap(list(CytoNormFiltered, cell), left_join)) %&gt;% dplyr::mutate(., Cellcytosel = purrr::map(Cellcyto, ~dplyr::select(., ImageNumber, Metadata_Well, Parent_Cytoplasm_Norm, Children_SG_Count, ParentID, AreaShape_Area, Intensity_MeanIntensity_GFP, AreaShape_FormFactor, AreaShape_Center_X, AreaShape_Center_Y))) %&gt;% dplyr::mutate(., SGnested = purrr::map(SG, ~SG_nest_f(.))) %&gt;% dplyr::mutate(., SGnested = purrr::map(SGnested, ~dplyr::select(., Metadata_Well, ParentID, SG = data))) %&gt;% dplyr::mutate(., CaprinSGnested = purrr::map(CaprinSG, ~SG_nest_f(.))) %&gt;% dplyr::mutate(., CaprinSGnested = purrr::map(CaprinSGnested, ~dplyr::select(., Metadata_Well, ParentID, CaprinSG = data))) %&gt;% dplyr::mutate(., CellcytoSG = purrr::pmap(list(Cellcytosel, SGnested), left_join)) %&gt;% dplyr::mutate(., CellcytoSGCaprin = purrr::pmap(list(CellcytoSG, CaprinSGnested), left_join)) 2.1 code chunks to check and filter for cytoplasmic area outliers SG_datasel_long_cellcyto_nfiltered_preplot &lt;- SG_datasel_long.tib %&gt;% dplyr::select(., plate, Cytoplasm_Norm) %&gt;% unnest(., cols = c(&quot;Cytoplasm_Norm&quot;)) %&gt;% left_join(., plate_association) %&gt;% dplyr::mutate(., condition = paste(NTF2, condition, sep = &quot;_&quot;)) SG_datasel_long_cellcyto_nfiltered_plot &lt;- SG_datasel_long_cellcyto_nfiltered_preplot %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(condition), y = CytoArea), scale = &quot;width&quot;) + theme_minimal() + scale_color_npg() + facet_grid(plate ~ ., scales = &quot;free_y&quot;) ggsave(&quot;./SG_datasel_long_cellcyto_nfiltered_plot.jpeg&quot;, SG_datasel_long_cellcyto_nfiltered_plot, device = &quot;jpeg&quot;, width = 120, height = 120, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_long_cellcyto_nfiltered_plot.ps&quot;, SG_datasel_long_cellcyto_nfiltered_plot, device = &quot;ps&quot;, width = 120, height = 120, units = c(&quot;mm&quot;)) SG_datasel_long_cellcyto_filtered_preplot &lt;- SG_datasel_long.tib %&gt;% dplyr::select(., plate, CytoNormFiltered) %&gt;% unnest(., cols = c(&quot;CytoNormFiltered&quot;)) %&gt;% left_join(., plate_association) %&gt;% dplyr::mutate(., condition = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% drop_na(., NTF2) SG_datasel_long_cellcyto_filtered_plot &lt;- SG_datasel_long_cellcyto_filtered_preplot %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(condition), y = CytoArea), scale = &quot;width&quot;) + theme_minimal() + scale_color_npg() + facet_grid(plate ~ ., scales = &quot;free_y&quot;) ggsave(&quot;./SG_datasel_long_cellcyto_filtered_plot.jpeg&quot;, SG_datasel_long_cellcyto_filtered_plot, device = &quot;jpeg&quot;, width = 120, height = 120, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_long_cellcyto_filtered_plot.ps&quot;, SG_datasel_long_cellcyto_filtered_plot, device = &quot;ps&quot;, width = 120, height = 120, units = c(&quot;mm&quot;)) to define SG positive cells hist_colors &lt;- (brewer.pal(n = 5, name = &quot;RdYlBu&quot;)) hist_colors_inverse &lt;- rev(hist_colors) SG_datasel_long_cellcyto_preplot &lt;- SG_datasel_long.tib %&gt;% dplyr::select(., plate, Cytoplasm_Norm) %&gt;% unnest(., cols = c(&quot;Cytoplasm_Norm&quot;)) %&gt;% left_join(., plate_association) %&gt;% dplyr::filter(., CytoArea &gt;cytoArea_min &amp; CytoArea &lt; cytoArea_max) %&gt;% dplyr::mutate(., condition = paste(NTF2, condition, sep = &quot;_&quot;)) SG_datasel_long_cellcyto_sum &lt;- SG_datasel_long_cellcyto_preplot %&gt;% dplyr::select(., condition, Children_SG_Count) %&gt;% dplyr::mutate(., SGpos = case_when(Children_SG_Count &gt; 0 ~ &quot;POS&quot;, TRUE ~ &quot;NEG&quot;)) %&gt;% dplyr::group_by(., SGpos) %&gt;% dplyr::summarize(., count(condition)) %&gt;% pivot_wider(., names_from = c(&quot;SGpos&quot;), values_from = c(&quot;freq&quot;), id_cols = c(&quot;x&quot;)) %&gt;% dplyr::mutate(., SGpos = (POS/(NEG+POS))*100) to analyse SG features cut_area_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::mutate(., areabins = cut(SGarea, breaks = c(-Inf, seq(1, 501, 25), Inf))) %&gt;% dplyr::mutate(., areabins_name = str_extract(areabins, pattern = &quot;,[:digit:]{1,5}&quot;)) %&gt;% dplyr::mutate(., areabins_number = str_extract(areabins_name, pattern = &quot;[:digit:]{1,5}&quot;)) %&gt;% dplyr::mutate_at(., c(&quot;areabins_number&quot;), as.numeric) return(df_out) } data_hist_area_f &lt;- function(df){ df_temp &lt;- df %&gt;% group_by(areabins_number) %&gt;% dplyr::summarize(SGareahist = n()) total_count &lt;- df %&gt;% dplyr::summarize(totalcount = n()) %&gt;% dplyr::select(., totalcount) %&gt;% pull() df_out &lt;- df_temp %&gt;% dplyr::mutate(., SGarea_frq = SGareahist/total_count) return(df_out) } data_hist_area2D_f &lt;- function(df){ df_hist &lt;- df %&gt;% group_by(Children_SG_Count, areabins_number) %&gt;% dplyr::summarize(SG2Dhist = n()) total_count &lt;- df_hist %&gt;% ungroup() %&gt;% dplyr::summarize(., cellcount = sum(SG2Dhist)) %&gt;% dplyr::select(., cellcount) %&gt;% pull() df_freq &lt;- df_hist %&gt;% dplyr::mutate(., SG2Dfrq = SG2Dhist/total_count) #SGsum &lt;- df_hist %&gt;% ungroup() %&gt;% dplyr::summarize(., SGsum = sum(SG2Dhist)) %&gt;% dplyr::select(., SGsum) %&gt;% pull() #df_out &lt;- df_hist %&gt;% dplyr::mutate(., SG2Dfreq = SG2Dhist/SGsum) %&gt;% dplyr::arrange(., SGcount_corr, areabins_number) return(df_freq) } data_kernel_area2D_f &lt;- function(df){ kernel_out &lt;- kde2d(df$Children_SG_Count, df$SGarea, h = c(1, 25), n=100) kernel_tib &lt;- kernel_out$z %&gt;% melt(.) kernel_Var1 &lt;- kernel_out$x %&gt;% melt(.) %&gt;% dplyr::mutate(., Var1 = row_number(.)) %&gt;% dplyr::select(., Var1, Children_SG_Count = value) kernel_Var2 &lt;- kernel_out$y %&gt;% melt(.) %&gt;% dplyr::mutate(., Var2 = row_number(.)) %&gt;% dplyr::select(., Var2, areabins_number = value) # kernel_Var3 &lt;- kernel_out$z %&gt;% melt(.) %&gt;% dplyr::mutate(., Var3 = row_number(.)) %&gt;% dplyr::select(., Var3, SG2Dfrq = value) kernel_tib_final &lt;- kernel_tib %&gt;% left_join(., kernel_Var1) %&gt;% left_join(., kernel_Var2) return(kernel_tib_final) } data_kernel_area2D_SG_f &lt;- function(df){ df_in &lt;- df %&gt;% replace_na(., list(Children_SG_Count = 0, SGarea = 0)) kernel_out &lt;- kde2d(df_in$Children_SG_Count, df_in$SGarea , h = c(1, 2), n=100) kernel_tib &lt;- kernel_out$z %&gt;% melt(.) kernel_Var1 &lt;- kernel_out$x %&gt;% melt(.) %&gt;% dplyr::mutate(., Var1 = row_number(.)) %&gt;% dplyr::select(., Var1, Children_SG_Count = value) kernel_Var2 &lt;- kernel_out$y %&gt;% melt(.) %&gt;% dplyr::mutate(., Var2 = row_number(.)) %&gt;% dplyr::select(., Var2, SGarea = value) ## kernel_Var3 &lt;- kernel_out$z %&gt;% melt(.) %&gt;% dplyr::mutate(., Var3 = row_number(.)) %&gt;% dplyr::select(., Var3, SG2Dfrq = value) kernel_tib_final &lt;- kernel_tib %&gt;% left_join(., kernel_Var1) %&gt;% left_join(., kernel_Var2) return(kernel_tib_final) } ecdf_area_f &lt;- function(df, toSelect){ ecdf_vector &lt;- c(seq(0, 500, 1)) out &lt;- df %&gt;% dplyr::select(toSelect) %&gt;% pull() out_function &lt;- ecdf(out) out_values &lt;- as_tibble(out_function(ecdf_vector)) %&gt;% dplyr::mutate(., area = ecdf_vector) %&gt;% dplyr::select(.,ecdf_value = value, area) return(out_values) } hist_ecdf_color_f &lt;- function(histdata, ecdfdata){ ecdfdata_combine &lt;- ecdfdata %&gt;% dplyr::select(., areabins_number = area, ecdf_value) histdata_out &lt;- histdata %&gt;% left_join(., ecdfdata_combine) return(histdata_out) } SGpos_count_f &lt;- function(df){ df %&gt;% dplyr::mutate(., SGtype = case_when(SGarea &gt; 0 ~ &quot;SGpos&quot;, TRUE ~ &quot;SGneg&quot;)) %&gt;% dplyr::group_by(., SGtype) %&gt;% dplyr::summarize(., SGtype_count = n()) } contour_line_f &lt;- function(df){ #https://stackoverflow.com/questions/23437000/how-to-plot-a-contour-line-showing-where-95-of-values-fall-within-in-r-and-in df_in &lt;- df %&gt;% dplyr::select(., x = Children_SG_Count, y = SGarea) #%&gt;% replace_na(., list(x = 0, y = 0)) kd &lt;- ks::kde(df_in, compute.cont=TRUE) ## extract results get_contour &lt;- function(kd_out=kd, prob=&quot;5%&quot;) { contour_95 &lt;- with(kd_out, contourLines(x=eval.points[[1]], y=eval.points[[2]], z=estimate, levels=cont[prob])[[1]]) as_tibble(contour_95) %&gt;% mutate(prob = prob) } dat_out &lt;- map_dfr(c(&quot;10%&quot;, &quot;20%&quot;, &quot;50%&quot;), ~get_contour(kd, .)) %&gt;% group_by(prob) %&gt;% mutate(n_val = 1:n()) %&gt;% ungroup() ## clean kde output #kd_df &lt;- expand_grid(x=kd$eval.points[[1]], y=kd$eval.points[[2]]) %&gt;% #mutate(z = c(kd$estimate %&gt;% t)) return(dat_out) } SGselect_f &lt;- function(df){ if (is_empty(df)) { df_out &lt;- tribble(~SGarea, ~SG_objnumber, 0, 1) } else { df_out &lt;- df %&gt;% dplyr::select(., -ImageNumber, -Parent_Cytoplasm_Norm) } return(df_out) } extract_cellSGs &lt;- function(df){ if (nrow(df) &lt; 1) { SGout &lt;- tribble(~ImageNumber, ~Parent_Cytoplasm_Norm, ~Children_SG_Count, ~SG_objnumber, ~SGarea, 1, 1, NA, 1, NA) } else { SGout &lt;- df %&gt;% dplyr::mutate(., SGsel = purrr::map(SG, ~SGselect_f(.))) %&gt;% dplyr::select(ImageNumber, Parent_Cytoplasm_Norm, Children_SG_Count, SGsel) %&gt;% unnest(., cols = c(&quot;SGsel&quot;), keep_empty = TRUE) %&gt;% replace_na(., list(Children_SG_Count = 0)) } return(SGout) } to select plates for analysis. In this case all plates were analyzed. #plate_selection &lt;- tribble(~plate, ~selection, # &quot;plate8352&quot;, &quot;Y&quot;) plate_selection &lt;- plate_association %&gt;% group_by(plate) %&gt;% dplyr::summarize(.) %&gt;% dplyr::mutate(., selection = &quot;Y&quot;) code to get some stats per experiment #, CellcytoCaprinSG = purrr::pmap(list(Cellcyto, CaprinSG), left_join) #quantile function quantileSG_f &lt;- function(df){ SG_lower &lt;- df %&gt;% dplyr::select(SGarea) %&gt;% pull() %&gt;% quantile(0.25) SG_upper &lt;- df %&gt;% dplyr::select(SGarea) %&gt;% pull() %&gt;% quantile(0.75) df_out &lt;- df %&gt;% dplyr::filter(., SGarea &gt; SG_lower &amp; SGarea &lt; SG_upper ) return(df_out) } SGmedian_f &lt;- function(df){ SGarea &lt;- df %&gt;% dplyr::summarize(., SGmedian = median(SGarea)) %&gt;% pull() return(SGarea) } SGcount_SGsel_f &lt;- function(df){ SGcount &lt;- df %&gt;% dplyr::group_by(., ImageNumber, Parent_Cytoplasm_Norm) %&gt;% dplyr::summarize(., Children_SG_Count) %&gt;% dplyr::ungroup() %&gt;% dplyr::summarize(., median(Children_SG_Count)) %&gt;% pull() return(SGcount) } SG_datasel_unnested.tib &lt;- SG_datasel_long.tib %&gt;% dplyr::select(., plate, CellcytoSGCaprin) %&gt;% ungroup() %&gt;% unnest(., CellcytoSGCaprin) %&gt;% right_join(., plate_association) %&gt;% ungroup() %&gt;% right_join(., plate_selection) %&gt;% dplyr::filter(., selection == &quot;Y&quot;) %&gt;% dplyr::group_by(., plate, NTF2, condition) %&gt;% dplyr::group_by(., plate, NTF2, condition) %&gt;% nest() %&gt;% dplyr::mutate(., data_filtered = purrr::map(data, ~dplyr::filter(., AreaShape_Area &lt; cytoArea_max, AreaShape_FormFactor &gt; 0.1))) SG_datasel_unnested_sum.tib &lt;- SG_datasel_unnested.tib %&gt;% dplyr::mutate(., data_sum = purrr::map(data_filtered, ~SG_areasum_f(.))) SG_datasel_unnested_sum.tib &lt;- SG_datasel_unnested_sum.tib %&gt;% dplyr::mutate(., data_sum = purrr::map(data_sum, ~unchop(., cols = c(&quot;SGarea&quot;, &quot;CaprinSGarea&quot;)))) SG_datasel_unnested_sum.nested &lt;- SG_datasel_unnested_sum.tib %&gt;% dplyr::mutate(., data_sum_bins = purrr::map(data_sum, ~cut_area_f(.))) %&gt;% dplyr::mutate(., data_areahist = purrr::map(data_sum_bins, ~data_hist_area_f(.))) %&gt;% dplyr::mutate(., data_ecdf = purrr::map(data_sum_bins, ~ecdf_area_f(., &quot;SGarea&quot;))) %&gt;% dplyr::mutate(., data_2D = purrr::map(data_sum_bins, ~data_hist_area2D_f(.))) %&gt;% dplyr::mutate(., data_SGfiltered = purrr::map(data_sum, ~quantileSG_f(.))) %&gt;% dplyr::mutate(., data_SGtest = purrr::map(data_sum, ~SGpos_count_f(.))) %&gt;% dplyr::mutate(., data_SG2D = purrr::map(data_SGfiltered, ~extract_cellSGs(.))) %&gt;% dplyr::mutate(., data_areahist_ecdfcol = purrr::pmap(list(data_areahist, data_ecdf), hist_ecdf_color_f)) %&gt;% dplyr::mutate(., data_SG2Dna = purrr::map(data_SG2D, ~replace_na(., list(Children_SG_Count = 0, SGarea = 0)))) %&gt;% dplyr::mutate(., data_SG2D_SGmedian = purrr::map(data_SG2Dna, ~SGmedian_f(.)), data_SG2D_SGcount = purrr::map(data_SG2Dna, ~SGcount_SGsel_f(.))) #%&gt;% dplyr::mutate(., data_SG2Dcontours = purrr::map(data_sum, ~contour_line_f(.))) #%&gt;% dplyr::mutate(., data_2Dkernel = purrr::map(data_sum, ~data_kernel_area2D_f(.))) # to get some stats per construct. data_sum_GFPi_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::mutate(., SGperc_GFP = (SGarea/AreaShape_Area)*100, SGperc_Caprin = (CaprinSGarea/AreaShape_Area)*100, GFPi_1000 = 1000*Intensity_MeanIntensity_GFP) return(df_out) } GFPrange_norm_f &lt;- function(df, GFP_max, GFP_min){ df_out &lt;- df %&gt;% dplyr::mutate(., GFPi_temp = (GFPi_1000-GFP_min)/(GFP_max - GFP_min)) %&gt;% dplyr::mutate(., GFPi_norm = case_when(GFPi_temp &lt; 0 ~ 0, TRUE ~ GFPi_temp)) return(df_out) } #, CellcytoCaprinSG = purrr::pmap(list(Cellcyto, CaprinSG), left_join) SG_datasel_unnested_ntf2.tib &lt;- SG_datasel_long.tib %&gt;% dplyr::select(., plate, CellcytoSGCaprin) %&gt;% ungroup() %&gt;% unnest(., CellcytoSGCaprin) %&gt;% left_join(., plate_association) %&gt;% drop_na(., NTF2) %&gt;% ungroup() %&gt;% right_join(., plate_selection) %&gt;% dplyr::filter(., selection == &quot;Y&quot;) %&gt;% dplyr::group_by(., NTF2, condition) %&gt;% nest() %&gt;% dplyr::mutate(., data_filtered = purrr::map(data, ~dplyr::filter(., AreaShape_Area &lt; cytoArea_max, AreaShape_FormFactor &gt; 0.1))) ## this takes long! SG_datasel_unnested_ntf2_sum.tib &lt;- SG_datasel_unnested_ntf2.tib %&gt;% dplyr::mutate(., data_sum = purrr::map(data_filtered, ~SG_areasum_f(.))) SG_datasel_unnested_ntf2_sum.tib &lt;- SG_datasel_unnested_ntf2_sum.tib %&gt;% dplyr::mutate(., data_sum = purrr::map(data_sum, ~unchop(., cols = c(&quot;SGarea&quot;, &quot;CaprinSGarea&quot;)))) SG_datasel_unnested_ntf2_sum.nested &lt;- SG_datasel_unnested_ntf2_sum.tib %&gt;% dplyr::mutate(., data_sum_bins = purrr::map(data_sum, ~cut_area_f(.))) SG_datasel_unnested_ntf2_sum_GFPi.nested &lt;- SG_datasel_unnested_ntf2_sum.nested %&gt;% dplyr::mutate(., data_sum_GFPi = purrr::map(data_sum, ~data_sum_GFPi_f(.))) SG_datasel_unnested_ntf2_sum_GFPirange.values &lt;- SG_datasel_unnested_ntf2_sum_GFPi.nested %&gt;% dplyr::select(., NTF2, condition, data_sum_GFPi) %&gt;% unnest(., data_sum_GFPi) %&gt;% ungroup() %&gt;% dplyr::summarize(., GFPi_max = quantile(GFPi_1000, probs = 0.5), GFPi_min = min(GFPi_1000)) SG_datasel_unnested_ntf2_sum_GFPi.nested &lt;- SG_datasel_unnested_ntf2_sum_GFPi.nested %&gt;% add_column(., GFP_max = SG_datasel_unnested_ntf2_sum_GFPirange.values$GFPi_max, GFP_min = SG_datasel_unnested_ntf2_sum_GFPirange.values$GFPi_min) %&gt;% dplyr::mutate(., data_sum_GFPnorm = purrr::pmap(list(data_sum_GFPi, GFP_max, GFP_min), GFPrange_norm_f)) #dplyr::mutate(., data_2Dkernel = purrr::map(data_sum, ~data_kernel_area2D_f(.))) to declare plate experiment association plate_expno_tribble &lt;- plate_selection %&gt;% dplyr::mutate(., experiment = row_number(selection)) 2.2 Percentage of SG-positive cells and Cell count SG_datasel_cellSGtot.preplot &lt;- SG_datasel_unnested_sum.nested %&gt;% dplyr::select(., NTF2, condition, data_SGtest) %&gt;% unnest(., cols = c(&quot;data_SGtest&quot;)) %&gt;% pivot_wider(., id_cols = c(&quot;plate&quot;, &quot;NTF2&quot;, &quot;condition&quot;), names_from = c(&quot;SGtype&quot;), values_from = c(&quot;SGtype_count&quot;)) %&gt;% replace_na(., list(SGpos = 0)) %&gt;% dplyr::mutate(., SGall = SGpos + SGneg) %&gt;% dplyr::mutate(., SGposfrc = (SGpos/SGall)*100, SGnegfrc = (SGneg/SGall)*100) %&gt;% left_join(., plate_expno_tribble) SG_datasel_cellSGtot_colplot.plot &lt;- SG_datasel_cellSGtot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% left_join(., plate_expno_tribble) %&gt;% dplyr::group_by(., colorgroup) %&gt;% dplyr::summarize(., value_mean = mean(SGposfrc, na.rm = TRUE), value_sd = sd(SGposfrc, na.rm = TRUE), value_max = value_mean+value_sd, value_min = value_mean-value_sd) %&gt;% ggplot(aes(x = colorgroup, y = value_mean, fill = colorgroup)) + geom_col(colour=&quot;black&quot;) + geom_errorbar(aes(ymin = value_min, ymax = value_max), width = 0.2) + theme_light() + scale_x_discrete(labels = NULL) + scale_y_continuous(&quot;SG-positive: %&quot;) + coord_cartesian(ylim = c(0,100)) + scale_fill_npg() + theme(legend.position=&quot;none&quot;) + #scale_color_manual(values = c(&quot;black&quot;, &quot;grey&quot;)) + #scale_fill_npg() + facet_grid(. ~ ., scales = &quot;free_y&quot;) print(SG_datasel_cellSGtot_colplot.plot) ggsave(&quot;./SG_datasel_cellSGtot_colplot.jpeg&quot;, SG_datasel_cellSGtot_colplot.plot, device = &quot;jpeg&quot;, width = 60, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_cellSGtot_colplot.ps&quot;, SG_datasel_cellSGtot_colplot.plot, device = &quot;ps&quot;, width = 60, height = 45, units = c(&quot;mm&quot;)) Percentage of SG-positive cells. For Supplemental Figure S7B. SG_datasel_cellcountplot.plot &lt;- SG_datasel_cellSGtot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% left_join(., plate_expno_tribble)%&gt;% ggplot(., aes(x = colorgroup, y = SGall, fill = colorgroup)) + geom_col(colour = &quot;black&quot;) + theme_light() + scale_x_discrete(labels = NULL) + scale_y_continuous(&quot;cell count&quot;) + scale_fill_npg() + #scale_color_manual(values = c(&quot;black&quot;, &quot;grey&quot;)) + #scale_fill_npg() + theme(legend.position=&quot;none&quot;) + facet_grid(. ~ ., scales = &quot;free_y&quot;) print(SG_datasel_cellcountplot.plot) ggsave(&quot;./SG_datasel_cellcountplo.jpeg&quot;, SG_datasel_cellcountplot.plot, device = &quot;jpeg&quot;, width = 60, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_cellcountplo.ps&quot;, SG_datasel_cellcountplot.plot, device = &quot;ps&quot;, width = 60, height = 45, units = c(&quot;mm&quot;)) Cell counts per experiment. For Supplemental Figure S7B. initial_stats.plot &lt;- egg::ggarrange(SG_datasel_cellcountplot.plot, SG_datasel_cellSGtot_colplot.plot, ncol = 2, widths = c(1,1)) #(plotlist = list(), nrow = 1, ncol = 4, legend = &quot;none&quot;) ggsave(file=&quot;initial_stats.jpeg&quot;, plot=initial_stats.plot,device=&quot;jpeg&quot;, width = 90, height = 45, units = c(&quot;mm&quot;)) ggsave(file=&quot;initial_stats.ps&quot;, plot=initial_stats.plot,device=&quot;ps&quot;, width = 90, height = 45, units = c(&quot;mm&quot;)) For Supplemental Figure S7B. 2.3 Analysis of cellular and SG parameters Following code also comprises function for binning according to GFP intensities. bin_size &lt;- 0.1 ncell_number &lt;- 9 plate_violingroups &lt;- plate_expno_tribble ntf2_violingroups &lt;- tribble(~NTF2, ~condition, ~violingroup, &quot;aWildtype&quot;, &quot;amock&quot;, 0, &quot;aWildtype&quot;, &quot;bAS&quot;, 10, &quot;bH31A&quot;, &quot;bAS&quot;, 20, &quot;cH31YH62Y&quot;, &quot;bAS&quot;, 30) median_exp_f &lt;- function(df, selection){ df_out &lt;- df %&gt;% group_by(., plate) %&gt;% dplyr::rename(., area = {{selection}}) %&gt;% dplyr::summarize(., median = median(area)) return(df_out) } median_numberSGs_f &lt;- function(df, selection){ df_out &lt;- df %&gt;% group_by(., plate) %&gt;% dplyr::rename(., number = {{selection}}) %&gt;% dplyr::summarize(., median = median(number)) return(df_out) } violin_trim_perc_f &lt;- function(df, qcut, selection){ name_selection &lt;- as.character({{selection}}) add_selection &lt;- df %&gt;% dplyr::select(., filterme = c(name_selection)) quantile_value &lt;- df %&gt;% dplyr::select(., c(&quot;plate&quot;, name_selection)) %&gt;% dplyr::rename(., qsel = {{name_selection}}) %&gt;% dplyr::group_by(., plate) %&gt;% dplyr::summarize(., qcut_value = quantile(qsel, qcut)) df_out &lt;- df %&gt;% left_join(., quantile_value) %&gt;% add_column(., add_selection) %&gt;% dplyr::filter(., filterme &lt; qcut_value) %&gt;% dplyr::mutate(., GFPbins = cut(.data[[selection]], breaks = c(seq(0, 2.5, bin_size) )) ) %&gt;% separate(., GFPbins, into = c(&quot;first&quot;, &quot;second&quot;), sep = &quot;,&quot;) %&gt;% separate(., second, into = c(&quot;GFPbin_number&quot;, &quot;empty&quot;), sep = &quot;\\\\]&quot;) %&gt;% dplyr::select(., !c(&quot;first&quot;, &quot;empty&quot;)) %&gt;% dplyr::mutate_at(., c(&quot;GFPbin_number&quot;), as.numeric) #%&gt;% dplyr::mutate_at(., c(&quot;GFPbins_id&quot;), as.numeric) return(df_out) } bin_GFPsum_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::group_by(., plate, GFPbin_number) %&gt;% dplyr::summarize(., ncells = n(), SGarea = mean(SGperc_GFP), CaprinSGarea = mean(SGperc_Caprin)) %&gt;% dplyr::filter(., ncells &gt; ncell_number) } bin_GFPsum_all_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::group_by(., GFPbin_number) %&gt;% dplyr::summarize(., ncells = n(), SGarea_median = median(SGperc_GFP), SGarea_q25 = quantile(SGperc_GFP, 0.25), SGarea_q75 = quantile(SGperc_GFP, 0.75), CaprinSGarea_median = median(SGperc_Caprin), CaprinSGarea_q25 = quantile(SGperc_Caprin, 0.25), CaprinSGarea_q75 = quantile(SGperc_Caprin, 0.75)) %&gt;% pivot_longer(., cols = contains(&quot;area&quot;), names_to = c(&quot;name&quot;, &quot;par&quot;), names_sep = &quot;_&quot;, values_to = &quot;value&quot;) return(df_out) } median_bin_exp_f &lt;- function(df, selection){ df_out &lt;- df %&gt;% group_by(., plate, GFPbin_number) %&gt;% dplyr::rename(., area = {{selection}}) %&gt;% dplyr::summarize(., median = median(area)) return(df_out) } median_bin_numberSGs_f &lt;- function(df, selection){ df_out &lt;- df %&gt;% group_by(., plate, GFPbin_number) %&gt;% dplyr::rename(., number = {{selection}}) %&gt;% dplyr::summarize(., median = median(number)) return(df_out) } mean_sd_violin_f &lt;- function(df){ df_out &lt;- df %&gt;% ungroup() %&gt;% dplyr::group_by(., GFPbin_number) %&gt;% nest() %&gt;% dplyr::mutate(., nexp = purrr::map(data, ~nrow(.))) %&gt;% unnest(., nexp) %&gt;% unnest(., data) %&gt;% dplyr::summarize(., SGarea_mean = mean(SGarea), SGarea_sd = sd(SGarea), CaprinSGarea_mean = mean(CaprinSGarea), CaprinSGarea_sd = sd(CaprinSGarea), ncells_count = sum(ncells), nexp_count = unique(nexp)) %&gt;% replace_na(., list(SGarea_sd = 0,CaprinSGarea_sd =0 )) %&gt;% dplyr::mutate(., SGarea_min = SGarea_mean - SGarea_sd, SGarea_max = SGarea_mean + SGarea_sd, CaprinSGarea_min = CaprinSGarea_mean - CaprinSGarea_sd, CaprinSGarea_max = CaprinSGarea_mean + CaprinSGarea_sd) %&gt;% drop_na(., GFPbin_number) return(df_out) } nexp_filter_f &lt;- function(df, nexp_filter){ df_out &lt;- df %&gt;% dplyr::filter(., nexp_count &gt; nexp_filter) %&gt;% pivot_longer(., cols = contains(c(&quot;area&quot;, &quot;nexp&quot;, &quot;ncells&quot;)), names_to = c(&quot;name&quot;, &quot;par&quot;), names_sep = &quot;_&quot;, values_to = &quot;value&quot;) return(df_out) } SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi.nested %&gt;% dplyr::mutate(., qcut = 0.95, selection1 = &quot;GFPi_norm&quot;) %&gt;% dplyr::mutate(., data_sum_violintrim = purrr::pmap(list(data_sum_GFPnorm, qcut, selection1), violin_trim_perc_f)) %&gt;% dplyr::select(., NTF2, condition, data_sum_violintrim) %&gt;% dplyr::mutate(., data_sum_violintrim_binned = purrr::pmap(list(data_sum_violintrim), bin_GFPsum_f)) %&gt;% dplyr::mutate(., data_sum_violintrim_binned_mean_nfil = purrr::pmap(list(data_sum_violintrim_binned), mean_sd_violin_f)) %&gt;% dplyr::mutate(., nexp_filter = 2) %&gt;% dplyr::mutate(., data_sum_violintrim_binned_mean = purrr::pmap(list(data_sum_violintrim_binned_mean_nfil, nexp_filter), nexp_filter_f)) %&gt;% dplyr::mutate(., data_sum_violintrim_binned_all = purrr::pmap(list(data_sum_violintrim), bin_GFPsum_all_f)) SG_datasel_unnested_ntf2_sum_GFPi_violin.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot %&gt;% unnest(., cols = c(&quot;data_sum_violintrim&quot;)) %&gt;% left_join(., plate_violingroups) %&gt;% left_join(., ntf2_violingroups) %&gt;% dplyr::mutate(., violingroupx = violingroup + experiment) SG_datasel_unnested_ntf2_sum_GFPi_boxplot.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot %&gt;% dplyr::mutate(., SGareasel = &quot;SGarea&quot;, CaprinSGareasel = &quot;CaprinSGarea&quot;, SGcount = &quot;Children_SG_Count&quot;, GFPi_1000sel = &quot;GFPi_norm&quot;, GFPi_1000sel = &quot;GFPi_norm&quot;, SGperc_GFPsel = &quot;SGperc_GFP&quot;, AreaShape_Area = &quot;AreaShape_Area&quot; ) %&gt;% dplyr::mutate(., data_sum_SGmedianexp = purrr::pmap(list(data_sum_violintrim, SGareasel), median_exp_f), data_sum_CaprinSGmedianexp = purrr::pmap(list(data_sum_violintrim, CaprinSGareasel), median_exp_f), data_sum_SGcountexp = purrr::pmap(list(data_sum_violintrim, SGcount), median_numberSGs_f), data_sum_GFPiexp = purrr::pmap(list(data_sum_violintrim, GFPi_1000sel), median_numberSGs_f), data_sum_SGperc_GFPexp = purrr::pmap(list(data_sum_violintrim, SGperc_GFPsel), median_numberSGs_f), data_sum_cytoarea = purrr::pmap(list(data_sum_violintrim, AreaShape_Area), median_exp_f) ) %&gt;% dplyr::select(., NTF2, condition, data_sum_SGmedianexp, data_sum_CaprinSGmedianexp, data_sum_SGcountexp, data_sum_GFPiexp, data_sum_SGperc_GFPexp, data_sum_cytoarea) SG_datasel_unnested_ntf2_sum_GFPi_SG_boxplot.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_boxplot.preplot %&gt;% unnest(., cols = c(&quot;data_sum_SGperc_GFPexp&quot;)) %&gt;% left_join(., plate_violingroups) %&gt;% left_join(., ntf2_violingroups) %&gt;% dplyr::mutate(., SGperc_GFP = median) %&gt;% dplyr::mutate(., violingroupx = violingroup + experiment) #%&gt;% dplyr::select(., NTF2, condition, data_sum) SG_datasel_unnested_ntf2_sum_GFPi_SGviolin.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_violin.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(violingroupx), y = SGperc_GFP), scale = &quot;width&quot;) + geom_point(data = SG_datasel_unnested_ntf2_sum_GFPi_SG_boxplot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)), aes(x = factor(violingroupx), y = SGperc_GFP, colour = factor(colorgroup) ), size = 3) + #coord_cartesian(ylim = c(0, 800)) + scale_y_continuous(&quot;GFP-G3BP1 SG area: %&quot;) + #breaks = c(0, 500, 1000)) + #scale_y_continuous(&quot;SGcount/cell&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;) + scale_color_npg() + facet_grid(. ~ ., scales = &quot;free_y&quot;) print(SG_datasel_unnested_ntf2_sum_GFPi_SGviolin.plot) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_violinSG.jpeg&quot;, SG_datasel_unnested_ntf2_sum_GFPi_SGviolin.plot, device = &quot;jpeg&quot;, width = 120, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_violinSG.ps&quot;, SG_datasel_unnested_ntf2_sum_GFPi_SGviolin.plot, device = &quot;ps&quot;, width = 120, height = 45, units = c(&quot;mm&quot;)) Violinplot of SG areas versus cells. Color code as in manuscript. Legend removed here. Not shown in ms. 2.3.1 other plots 2.3.1.1 Size of cytoplasm SG_datasel_unnested_ntf2_sum_cyotsize_boxplot.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_boxplot.preplot %&gt;% unnest(., cols = c(&quot;data_sum_cytoarea&quot;)) %&gt;% left_join(., plate_violingroups) %&gt;% left_join(., ntf2_violingroups) %&gt;% dplyr::mutate(., AreaShape_Area = median) %&gt;% dplyr::mutate(., violingroupx = violingroup + experiment) #%&gt;% dplyr::select(., NTF2, condition, data_sum) SG_datasel_unnested_ntf2_sum_cyotsize.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_violin.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(violingroupx), y = AreaShape_Area), scale = &quot;width&quot;) + geom_point(data = SG_datasel_unnested_ntf2_sum_cyotsize_boxplot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)), aes(x = factor(violingroupx), y = AreaShape_Area, colour = factor(colorgroup) ), size = 3) + #coord_cartesian(ylim = c(0, 800)) + scale_y_continuous(&quot;cyto size: um2&quot;, breaks = c(250/area_um, 500/area_um, 750/area_um, 1000/area_um) , labels = function(breaks) ((breaks*area_um))) + #breaks = c(0, 500, 1000)) + #coord_cartesian(ylim = c(0,)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + scale_color_npg() + facet_grid(. ~ ., scales = &quot;free_y&quot;) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_cyotsize.jpeg&quot;, SG_datasel_unnested_ntf2_sum_cyotsize.plot, device = &quot;jpeg&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_cyotsize.ps&quot;, SG_datasel_unnested_ntf2_sum_cyotsize.plot, device = &quot;ps&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) SG_datasel_unnested_ntf2_sum_cyotsize_boxplot.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_boxplot.preplot %&gt;% unnest(., cols = c(&quot;data_sum_cytoarea&quot;)) %&gt;% left_join(., plate_violingroups) %&gt;% left_join(., ntf2_violingroups) %&gt;% dplyr::mutate(., AreaShape_Area = median) %&gt;% dplyr::mutate(., violingroupx = violingroup + experiment) #%&gt;% dplyr::select(., NTF2, condition, data_sum) SG_datasel_unnested_ntf2_sum_cyotsizeLegend.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_violin.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(violingroupx), y = AreaShape_Area), scale = &quot;width&quot;) + geom_point(data = SG_datasel_unnested_ntf2_sum_cyotsize_boxplot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)), aes(x = factor(violingroupx), y = AreaShape_Area, colour = factor(colorgroup) ), size = 3) + #coord_cartesian(ylim = c(0, 800)) + scale_y_continuous(&quot;cyto size: um2&quot;, breaks = c(250/area_um, 500/area_um, 750/area_um, 1000/area_um) , labels = function(breaks) ((breaks*area_um))) + #breaks = c(0, 500, 1000)) + #coord_cartesian(ylim = c(0,)) + theme_minimal() + #theme(legend.position = &quot;none&quot;) + scale_color_npg() + facet_grid(. ~ ., scales = &quot;free_y&quot;) print(SG_datasel_unnested_ntf2_sum_cyotsizeLegend.plot) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_cyotsizeLegend.jpeg&quot;, SG_datasel_unnested_ntf2_sum_cyotsizeLegend.plot, device = &quot;jpeg&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_cyotsizeLegend.ps&quot;, SG_datasel_unnested_ntf2_sum_cyotsizeLegend.plot, device = &quot;ps&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) Violinplot of cytoplasm size of cells in each dataset. Color code as in manuscript. Not shown in ms. 2.3.1.2 GFPintensity distribution SG_datasel_unnested_ntf2_sum_GFPi_GFPi_boxplot.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_boxplot.preplot %&gt;% unnest(., cols = c(&quot;data_sum_GFPiexp&quot;)) %&gt;% dplyr::mutate(., GFPi_norm = median) %&gt;% left_join(., plate_violingroups) %&gt;% left_join(., ntf2_violingroups) %&gt;% dplyr::mutate(., violingroupx = violingroup + experiment) #%&gt;% dplyr::select(., NTF2, condition, data_sum) SG_datasel_unnested_ntf2_sum_GFPi_GFPiviolin.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_violin.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% ggplot(data = .) + geom_violin(aes(x = factor(violingroupx), y = GFPi_norm), scale = &quot;width&quot;) + geom_point(data = SG_datasel_unnested_ntf2_sum_GFPi_GFPi_boxplot.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)), aes(x = factor(violingroupx), y = GFPi_norm, colour = factor(colorgroup) ), size = 3) + #coord_cartesian(ylim = c(0, 800)) + scale_y_continuous(&quot;GFPi&quot;) + #breaks = c(0, 500, 1000)) + #scale_y_continuous(&quot;SGcount/cell&quot;) + theme_minimal() + theme(legend.position = &quot;none&quot;) + coord_cartesian(ylim = c(0,4)) + scale_color_npg() + facet_grid(. ~ .) print(SG_datasel_unnested_ntf2_sum_GFPi_GFPiviolin.plot) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_violinGFPi.jpeg&quot;, SG_datasel_unnested_ntf2_sum_GFPi_GFPiviolin.plot, device = &quot;jpeg&quot;, width = 120, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_violinGFPi.ps&quot;, SG_datasel_unnested_ntf2_sum_GFPi_GFPiviolin.plot, device = &quot;ps&quot;, width = 120, height = 45, units = c(&quot;mm&quot;)) Violinplot of GFP intensities. Color code as in manuscript. For Supplemental Figure S7. 2.4 SGarea versus GFPin 2.4.1 Violinplot of GFP intensities bin_sel &lt;- 4 SG_facets &lt;- tribble(~name, ~facetname, &quot;SGarea&quot;, &quot;a.G3BP&quot;, &quot;CaprinSGarea&quot;, &quot;b.Caprin&quot;) SG_datasel_unnested_ntf2_sum_GFPi_filtered_mean.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot %&gt;% dplyr::select(NTF2, condition, data_sum_violintrim_binned_mean) %&gt;% unnest(., data_sum_violintrim_binned_mean) %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% dplyr::filter(., GFPbin_number &lt; bin_sel) %&gt;% dplyr::filter(., par != &quot;count&quot;) SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot %&gt;% dplyr::select(NTF2, condition, data_sum_violintrim_binned) %&gt;% unnest(., data_sum_violintrim_binned) %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% dplyr::mutate(., plategroup = paste(NTF2, condition, plate, sep = &quot;_&quot;)) %&gt;% pivot_longer(., cols = contains(&quot;area&quot;), names_to = c(&quot;name&quot;), values_to = &quot;value&quot;) %&gt;% dplyr::filter(., GFPbin_number &lt; bin_sel) SG_datasel_unnested_ntf2_sum_GFPi_filtered_all.preplot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered.preplot %&gt;% dplyr::select(NTF2, condition, data_sum_violintrim_binned_all) %&gt;% unnest(., data_sum_violintrim_binned_all) %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep = &quot;_&quot;)) %&gt;% dplyr::filter(., GFPbin_number &lt; bin_sel) SG_datasel_unnested_ntf2_sum_GFPi_filtered_all.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered_mean.preplot %&gt;% left_join(., SG_facets) %&gt;% ggplot(data = .) + geom_line(data = . %&gt;% dplyr::filter(., par == &quot;mean&quot;) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, y = value), colour = &quot;black&quot;, size = 2 ) + #geom_line(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% left_join(., SG_facets) %&gt;% left_join(., ncells_alpha_line) %&gt;% dplyr::filter(., ncell_cut &gt; 200), aes(x = GFPbin_number, y = value, colour = factor(colorgroup), group = plategroup), size = 0.5 ) + geom_point(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, y = value, colour = factor(plate))) + #geom_ribbon(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% dplyr::summarize(., ymin = min(value), ymax = (max(value))) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, ymin = ymin, ymax = ymax, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;SG area: %&quot;, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + theme_minimal() + theme(legend.position = &quot;none&quot;) + scale_color_brewer(palette = &quot;Paired&quot;) + #scale_fill_npg() + facet_grid(facetname ~ colorgroup) print(SG_datasel_unnested_ntf2_sum_GFPi_filtered_all.plot) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_line_all.jpeg&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_all.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_unnested_ntf2_sum_GFPi_line_all.ps&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_all.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) SG areas versus GFP intensities, for each experiment. Not shown in ms. 2.4.2 fitting dose-response curves Data were normalized as described in manuscript. Apparent dose-response curves were obtained by plotting the median SG area of each bin against its respective Frel-value, and analyzed applying the general asymmetric five-parameter logistic model as implemented in the drc package. In the first step, datasets within a single channel were normalized to the respective fitted maximal response of the wildtype dose-response curve for final analysis. plates &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% dplyr::group_by(plate) %&gt;% dplyr::summarize() %&gt;% deframe() predict_values &lt;- expand.grid(GFPbin_number =c(seq(0,2.5, 0.01)), plate = plates) predict_values_augment &lt;- predict_values %&gt;% as_tibble(.) drm_predict_f &lt;- function(df){ data &lt;- df drm_predict &lt;- predict(data, predict_values) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } predict_norm_values &lt;- expand.grid(GFPbin_number =c(seq(0,2.5, 0.01))) drm_predict_norm_f &lt;- function(df){ data &lt;- df drm_predict &lt;- predict(data, predict_norm_values) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } drm_f &lt;- function(df){ data &lt;- df drm_out &lt;- drm(value ~ GFPbin_number, plate, data = data, fct = L.5(), pmodels = list(~1, ~plate-1, ~plate-1, ~1, ~1), lowerl = c(-Inf, 0, -Inf, -Inf, -Inf)) return(drm_out) } combine_data_pred_f &lt;- function(data, drm_pred){ data_groups &lt;- data %&gt;% dplyr::group_by(., plate, colorgroup, plategroup) %&gt;% dplyr::summarize() drm_pred_out &lt;- drm_pred %&gt;% left_join(., data_groups) return(drm_pred_out) } SG_data_all &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, name) %&gt;% nest() SG_DR_bAS &lt;- SG_data_all %&gt;% dplyr::filter(., condition == &quot;bAS&quot;) %&gt;% dplyr::mutate(., drm_out = purrr::pmap(list(data),drm_f)) %&gt;% dplyr::mutate(., drm_pred_temp = purrr::pmap(list(drm_out),drm_predict_f)) %&gt;% dplyr::mutate(., drm_pred = purrr::pmap(list(data, drm_pred_temp),combine_data_pred_f)) %&gt;% dplyr::mutate(., drm_tidy = purrr::pmap(list(drm_out),tidy)) SG_DR_bAS.plot &lt;- SG_DR_bAS %&gt;% left_join(., SG_facets) %&gt;% ggplot() + geom_line(data = . %&gt;% dplyr::select(., !c(&quot;data&quot;, &quot;drm_out&quot;)) %&gt;% unnest(., drm_pred) %&gt;% ungroup(.) %&gt;% dplyr::filter(., NTF2 == &quot;aWildtype&quot; &amp; condition == &quot;bAS&quot;), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 1 ) + geom_point(data = . %&gt;% dplyr::select(., !c(&quot;drm_out&quot;, &quot;drm_pred&quot;)) %&gt;% unnest(., data), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 2 ) + #geom_line(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% left_join(., SG_facets) %&gt;% left_join(., ncells_alpha_line) %&gt;% dplyr::filter(., ncell_cut &gt; 200), aes(x = GFPbin_number, y = value, colour = factor(colorgroup), group = plategroup), size = 0.5 ) + #geom_ribbon(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% dplyr::summarize(., ymin = min(value), ymax = (max(value))) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, ymin = ymin, ymax = ymax, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;SG area: %&quot;, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + theme_minimal() + #theme(legend.position = &quot;none&quot;) + scale_color_brewer(palette = &quot;Paired&quot;) + #scale_fill_npg() + facet_grid(facetname ~ colorgroup) print(SG_DR_bAS.plot) ggsave(&quot;./SG_DR_bAS.jpeg&quot;, SG_DR_bAS.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_DR_bAS.ps&quot;, SG_DR_bAS.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) SG areas plotted against GFP intensity per binned cells for each construct and dataset. DRC fit to wild-type for normalization. For Supplemental Figure S7. 2.4.3 normalize based on max response Then data were normalized to max response of wild-type. plate_response_norm &lt;- SG_DR_bAS %&gt;% dplyr::select(., NTF2, condition, name, drm_tidy) %&gt;% unnest(., drm_tidy) %&gt;% dplyr::filter(., NTF2 == &quot;aWildtype&quot;, term == &quot;d&quot;) %&gt;% dplyr::select(., NTF2, condition, name, curve, value = estimate) %&gt;% dplyr::mutate(., plate = str_replace(curve, &quot;plateplate&quot;, &quot;plate&quot;)) %&gt;% ungroup() %&gt;% dplyr::select(., !c(&quot;curve&quot;, &quot;NTF2&quot;, &quot;condition&quot;)) %&gt;% dplyr::select(., name, norm = value, plate) %&gt;% group_by(., name) %&gt;% nest(normalization = !c(&quot;name&quot;)) SGarea_normalize_f &lt;- function(df, normalization){ df_out &lt;- df %&gt;% left_join(., normalization) %&gt;% dplyr::mutate(., value_old = value) %&gt;% dplyr::select(., !c(&quot;value&quot;)) %&gt;% dplyr::mutate(., value = value_old/norm) %&gt;% return(df_out) } SG_DR_bAS_norm &lt;- SG_data_all %&gt;% left_join(., plate_response_norm) %&gt;% dplyr::mutate(., data_norm = purrr::pmap(list(data,normalization), SGarea_normalize_f)) %&gt;% dplyr::mutate(., data_norm_select = purrr::pmap(list(data,normalization), SGarea_normalize_f)) SG_DR_bAS_norm.plot &lt;- SG_DR_bAS_norm %&gt;% left_join(., SG_facets) %&gt;% ggplot() + #geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 1 ) + geom_point(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 2 ) + #geom_line(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% left_join(., SG_facets) %&gt;% left_join(., ncells_alpha_line) %&gt;% dplyr::filter(., ncell_cut &gt; 200), aes(x = GFPbin_number, y = value, colour = factor(colorgroup), group = plategroup), size = 0.5 ) + #geom_ribbon(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% dplyr::summarize(., ymin = min(value), ymax = (max(value))) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, ymin = ymin, ymax = ymax, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;normalized SG area&quot;, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + theme_minimal() + #theme(legend.position = &quot;none&quot;) + scale_color_brewer(palette = &quot;Paired&quot;) + #scale_fill_npg() + facet_grid(facetname ~ colorgroup) print(SG_DR_bAS_norm.plot) ggsave(&quot;./SG_DR_bAS_norm.jpeg&quot;, SG_DR_bAS_norm.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_DR_bAS_norm.ps&quot;, SG_DR_bAS_norm.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) SG areas plotted against GFP intensity per binned cells for each construct and dataset. Normalized to wild-type as described. Not shown in ms. Two H31YH62Y Caprin-1 channel datasets (reds) appear as outliers compared to the others. 2.4.4 re-analyse normalized data Code to select datasets to be included in final fit. drm_norm_f &lt;- function(df){ data &lt;- df drm_out &lt;- drm(value ~ GFPbin_number, plate, data = data, fct = L.5(), pmodels = list(~1, ~1, ~1, ~1, ~1), lowerl = c(-Inf, 0, -Inf, -Inf, -Inf), upperl = c(Inf, 0.01, Inf, Inf, Inf)) return(drm_out) } drm_predictnorm_f &lt;- function(df, predict_values){ data &lt;- df drm_predict &lt;- predict(data, predict_values) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } drm_predictnorm_conf_f &lt;- function(df, predict_values){ data &lt;- df drm_predict &lt;- predict(data, predict_values, interval = &quot;confidence&quot;, vcov.dcr=sandwich) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } unique_curve_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::select(., !c(&quot;plate&quot;)) %&gt;% unique(.) return(df_out) } ###modify function filter_data_f &lt;- function(data, filtername){ data_out &lt;- data %&gt;% dplyr::mutate_at(c(&quot;plate&quot;), ~str_replace_all(., pattern = {{filtername}}, replacement = &quot;filterme&quot;)) %&gt;% dplyr::filter(., plate != &quot;filterme&quot;) return(data_out) } grid_predictvalues_f &lt;- function(data){ plates &lt;- data %&gt;% dplyr::group_by(plate) %&gt;% dplyr::summarize() %&gt;% deframe() predict_values &lt;- expand.grid(GFPbin_number =c(seq(0,2.5, 0.01)), plate = plates) return(predict_values) } augment_f &lt;- function(df1, predict_values_augment){ data_out &lt;- df1 %&gt;% augment(., newdata = predict_values_augment, conf.int = TRUE) return(data_out) } ###apply right_join instead filter_dataset &lt;- tribble(~NTF2, ~name, ~filtername, &quot;cH31YH62Y&quot;, &quot;CaprinSGarea&quot;, &quot;plate21851|plate21852&quot;) SG_DR_bAS_norm_DRre &lt;- SG_DR_bAS_norm %&gt;% left_join(., filter_dataset) %&gt;% unnest(., filtername) %&gt;% replace_na(., list(filtername = &quot;none&quot;)) %&gt;% dplyr::mutate(., data_normOLD = data_norm) %&gt;% dplyr::mutate(., data_filtered = purrr::pmap(list(data_norm, filtername),filter_data_f)) %&gt;% dplyr::select(., NTF2, condition, name, data, normalization, data_normOLD, data_norm = data_filtered) %&gt;% dplyr::mutate(., predict_values = purrr::map(data_norm, ~grid_predictvalues_f(.)))%&gt;% dplyr::filter(., condition == &quot;bAS&quot;) %&gt;% dplyr::mutate(., drm_out = purrr::pmap(list(data_norm),drm_norm_f)) %&gt;% dplyr::mutate(., drm_pred_temp = purrr::pmap(list(drm_out, predict_values),drm_predictnorm_f), drm_predconf_temp = purrr::pmap(list(drm_out, predict_values),drm_predictnorm_conf_f)) %&gt;% dplyr::mutate(., drm_pred = purrr::pmap(list(data, drm_predconf_temp),combine_data_pred_f)) %&gt;% dplyr::mutate(., drm_tidy = purrr::pmap(list(drm_out),tidy)) plategroup_join &lt;- SG_data_all %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data&quot;)) %&gt;% unnest(., data) %&gt;% group_by(., NTF2, condition, facetname, plate, colorgroup, plategroup) %&gt;% dplyr::summarize() colorgroup_join &lt;- plategroup_join %&gt;% ungroup() %&gt;% dplyr::select(., !c(&quot;plate&quot;, &quot;plategroup&quot;)) %&gt;% unique() SG_DR_bAS_norm_DRre.plot &lt;- SG_DR_bAS_norm_DRre %&gt;% left_join(., SG_facets) %&gt;% ggplot() + #geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 1 ) + geom_point(data = . %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_normOLD&quot;)) %&gt;% unnest(., data_normOLD), aes(x = GFPbin_number, y = value, color = factor(colorgroup)), shape = 1, size = 1 ) + geom_point(data = . %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, color = factor(colorgroup)), size = 1 ) + geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% left_join(., colorgroup_join), aes(x = GFPbin_number, y = value, group = colorgroup), colour = &quot;black&quot;, size = 1 ) + geom_point(data = SG_DR_bAS_norm %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm) %&gt;% dplyr::filter(., NTF2 == &quot;aWildtype&quot;, condition == &quot;amock&quot;), aes(x = GFPbin_number, y = value, fill = factor(colorgroup), color = factor(colorgroup)), size = 1 ) + #geom_ribbon(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_augment_unique&quot;)) %&gt;% unnest(., drm_augment_unique) %&gt;% dplyr::mutate(., value = .fitted) %&gt;% left_join(., colorgroup_join), aes(x = GFPbin_number, ymin = .lower, ymax = .upper, fill = factor(colorgroup)), alpha = 0.25 ) + #coord_cartesian(ylim(0, 1.5)) + scale_y_continuous(&quot;normalized SG area&quot;, minor_breaks = NULL) + #, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + coord_cartesian(xlim = c(0,2.5), ylim = c(0,1.5)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_color_brewer(palette = &quot;Paired&quot;) + scale_color_npg() + facet_grid(facetname ~ colorgroup) print(SG_DR_bAS_norm_DRre.plot) ggsave(&quot;./SG_DR_bAS_norm_DRre.jpeg&quot;, SG_DR_bAS_norm_DRre.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_DR_bAS_norm_DRre.ps&quot;, SG_DR_bAS_norm_DRre.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) Final fit as shown in Figure 5. Separate panels for each construct. SG_DR_bAS_norm_DRre_combined.plot &lt;- SG_DR_bAS_norm_DRre %&gt;% left_join(., SG_facets) %&gt;% ggplot() + #geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 1 ) + geom_point(data = SG_DR_bAS_norm %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, color = factor(colorgroup)), size = 1, alpha = 0.3 ) + geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% left_join(., colorgroup_join), aes(x = GFPbin_number, y = value, group = colorgroup, color = factor(colorgroup)), size = 1.5 ) + #geom_ribbon(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_augment_unique&quot;)) %&gt;% unnest(., drm_augment_unique) %&gt;% dplyr::mutate(., value = .fitted) %&gt;% left_join(., colorgroup_join), aes(x = GFPbin_number, ymin = .lower, ymax = .upper, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;normalized SG area&quot;, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_color_brewer(palette = &quot;Paired&quot;) + scale_color_npg() + facet_grid(facetname ~ .) print(SG_DR_bAS_norm_DRre_combined.plot) ggsave(&quot;./SG_DR_bAS_norm_DRre_combined.jpeg&quot;, SG_DR_bAS_norm_DRre_combined.plot, device = &quot;jpeg&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_DR_bAS_norm_DRre_combined.ps&quot;, SG_DR_bAS_norm_DRre_combined.plot, device = &quot;ps&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) Final fit as shown in Figure 5. Constructs combined. SG_DR_bAS_norm_DRre_conf.plot &lt;- ggplot() + geom_ribbon(data = SG_DR_bAS_norm_DRre %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% inner_join(., colorgroup_join) %&gt;% dplyr::filter(., GFPbin_number &gt; 0.2), aes(x = GFPbin_number, ymin = Lower, ymax = Upper, fill = factor(colorgroup)), alpha = 0.8) + geom_line(data = SG_DR_bAS_norm_DRre %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% left_join(., colorgroup_join) %&gt;% dplyr::filter(., GFPbin_number &gt; 0.2), aes(x = GFPbin_number, y = value, fill = factor(colorgroup), colour = factor(colorgroup)), size = 1 ) + geom_point(data = SG_DR_bAS_norm %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm) %&gt;% dplyr::filter(., NTF2 == &quot;aWildtype&quot;, condition == &quot;amock&quot;), aes(x = GFPbin_number, y = value, fill = factor(colorgroup), color = factor(colorgroup)), size = 0.5 ) + # + scale_y_continuous(&quot;normalized SG area&quot;, breaks = c(0,0.5,1), minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;GFPi&quot;, breaks = c(1,2), minor_breaks = NULL) + coord_cartesian(ylim = c(0,1.5)) + #coord_cartesian(ylim(0,1.5)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_color_brewer(palette = &quot;Paired&quot;) + scale_color_npg() + #scale_fill_manual(., values = npg_manual_scale) + scale_fill_npg() + facet_grid(facetname ~ .) print(SG_DR_bAS_norm_DRre_conf.plot) ggsave(&quot;./SG_DR_bAS_norm_DRre_conf.jpeg&quot;, SG_DR_bAS_norm_DRre_conf.plot, device = &quot;jpeg&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_DR_bAS_norm_DRre_conf.ps&quot;, SG_DR_bAS_norm_DRre_conf.plot, device = &quot;ps&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) Final fit as shown in Figure 5. Constructs combined. Fits shown as lines with 95% confidence interval. 2.4.5 SG drc stats term_tribble &lt;- tribble(~term, ~type, &quot;b&quot;, &quot;steepness&quot;, &quot;d&quot;, &quot;maxresponse&quot;) drm_stats_f &lt;- function(df1, df2){ df1_out &lt;- df1 %&gt;% ED(., 50) %&gt;% as_tibble() %&gt;% dplyr::select(., estimate = Estimate, std.error = contains(&quot;Error&quot;)) %&gt;% unique() %&gt;% dplyr::mutate(., type = &quot;ED50&quot;) df2_out &lt;- df2 %&gt;% left_join(., term_tribble) %&gt;% dplyr::select(., type, estimate, std.error) %&gt;% drop_na(., type) df_out &lt;- df1_out %&gt;% add_row(., df2_out) return(df_out) } SG_DR_bAS_norm_DRre_stats &lt;- SG_DR_bAS_norm_DRre %&gt;% left_join(., SG_facets) %&gt;% dplyr::mutate(., drm_stats = purrr::pmap(list(drm_out, drm_tidy), drm_stats_f)) ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 0.849147 0.020911 ## e:plate21692:50 0.849147 0.020911 ## e:plate21711:50 0.849147 0.020911 ## e:plate21712:50 0.849147 0.020911 ## e:plate21851:50 0.849147 0.020911 ## e:plate21852:50 0.849147 0.020911 ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 1.103618 0.025875 ## e:plate21692:50 1.103618 0.025875 ## e:plate21711:50 1.103618 0.025875 ## e:plate21712:50 1.103618 0.025875 ## e:plate21851:50 1.103618 0.025875 ## e:plate21852:50 1.103618 0.025875 ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 0.841437 0.080195 ## e:plate21692:50 0.841437 0.080195 ## e:plate21711:50 0.841437 0.080195 ## e:plate21712:50 0.841437 0.080195 ## e:plate21851:50 0.841437 0.080195 ## e:plate21852:50 0.841437 0.080195 ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 1.186411 0.059493 ## e:plate21692:50 1.186411 0.059493 ## e:plate21711:50 1.186411 0.059493 ## e:plate21712:50 1.186411 0.059493 ## e:plate21851:50 1.186411 0.059493 ## e:plate21852:50 1.186411 0.059493 ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 0.833152 0.027953 ## e:plate21692:50 0.833152 0.027953 ## e:plate21711:50 0.833152 0.027953 ## e:plate21712:50 0.833152 0.027953 ## ## Estimated effective doses ## ## Estimate Std. Error ## e:plate21691:50 1.027832 0.033035 ## e:plate21692:50 1.027832 0.033035 ## e:plate21711:50 1.027832 0.033035 ## e:plate21712:50 1.027832 0.033035 ## e:plate21851:50 1.027832 0.033035 ## e:plate21852:50 1.027832 0.033035 2.4.6 Cell numbers per bin bin_min &lt;- 0.6 bin_max &lt;- 1.6 SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_count.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% dplyr::group_by(., GFPbin_number, colorgroup) %&gt;% dplyr::summarize(., ncells= sum(ncells)) %&gt;% dplyr::mutate(., par = &quot;ncells&quot;) %&gt;% dplyr::mutate(bin_select = case_when(ncells &lt; 5 ~ &quot;discard&quot;, TRUE ~ &quot;take&quot;)) %&gt;% ggplot(data = .) + geom_col(aes(x = GFPbin_number, y = ncells, fill = bin_select), colour = &quot;black&quot;, size = 0.5) + #sn = force_plot$sample_number, y = ..count../sn #coord_cartesian(xlim = c(0,20)) + #ylim = c(0, 0.02) ylim = c(0, 0.03) scale_x_continuous(&quot;GFPi&quot;, n.breaks = 3, minor_breaks = NULL) + scale_y_continuous(&quot;Cell Count&quot;, n.breaks = 3, minor_breaks = NULL) + coord_cartesian(xlim=c(0,2.5)) + #scale_fill_gradientn(colors = c(&quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;), breaks= c(0.005, 0.01, 0.02)) + #scale_fill_manual(., values = c(&quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;)) + #scale_fill_gradientn(colors = hist_colors, limits = c(0,1), values = scales::rescale(c(0, 0.5, 0.75, 0.85, 1)), space = &quot;Lab&quot;) + # scale_fill_manual(., values = c(&quot;take&quot; = &quot;grey&quot;, &quot;discard&quot; = &quot;white&quot;)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_fill_continuous() + #scale_fill_npg() + facet_grid(par ~ colorgroup) print(SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_count.plot) ggsave(&quot;./SG_datasel_cellcount.plot.jpeg&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_count.plot, device = &quot;jpeg&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_cellcount.plot.ps&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_count.plot, device = &quot;ps&quot;, width = 160, height = 45, units = c(&quot;mm&quot;)) Total cell numbers per bin. Not shown in ms. SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_countexp.plot &lt;- SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% dplyr::mutate(., colorgroup = paste(NTF2, condition, sep =&quot;_&quot;)) %&gt;% dplyr::group_by(., GFPbin_number, colorgroup, plate) %&gt;% dplyr::summarize(., ncells= sum(ncells)) %&gt;% dplyr::mutate(., par = &quot;ncells&quot;) %&gt;% dplyr::mutate(bin_select = case_when(ncells &lt; 5 ~ &quot;discard&quot;, TRUE ~ &quot;take&quot;)) %&gt;% ggplot(data = .) + geom_col(aes(x = GFPbin_number, y = ncells, fill = bin_select), colour = &quot;black&quot;, size = 0.5) + #sn = force_plot$sample_number, y = ..count../sn #coord_cartesian(xlim = c(0,20)) + #ylim = c(0, 0.02) ylim = c(0, 0.03) scale_x_continuous(&quot;GFPi&quot;, n.breaks = 3, minor_breaks = NULL) + scale_y_continuous(&quot;Cell Count&quot;, n.breaks = 3, minor_breaks = NULL) + coord_cartesian(xlim=c(0,2.5)) + #scale_fill_gradientn(colors = c(&quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;), breaks= c(0.005, 0.01, 0.02)) + #scale_fill_manual(., values = c(&quot;blue&quot;, &quot;yellow&quot;, &quot;red&quot;)) + #scale_fill_gradientn(colors = hist_colors, limits = c(0,1), values = scales::rescale(c(0, 0.5, 0.75, 0.85, 1)), space = &quot;Lab&quot;) + # scale_fill_manual(., values = c(&quot;take&quot; = &quot;grey&quot;, &quot;discard&quot; = &quot;white&quot;)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_fill_continuous() + #scale_fill_npg() + facet_grid(plate ~ colorgroup, scales = &quot;free_y&quot;) print(SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_countexp.plot) ggsave(&quot;./SG_datasel_cellcount.plate_plot.jpeg&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_countexp.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./SG_datasel_cellcount.plate_plot.ps&quot;, SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_countexp.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) Cell numbers per bin per experiment. Not shown in ms. 3 analysis of LLPS Data were analyzed similarly to cellular SG condensates. However, MD Panas has pre-analyzed the data and excel sheets instead of Cellprofiler tables were imported. 3.1 import data drm_LLPS_f &lt;- function(df){ data &lt;- df %&gt;% dplyr::mutate(., value = AreaOcc/AreaTot) drm_out &lt;- drm(value ~ conc_uM, filename, data = data, fct = L.5(), pmodels = list(~1, ~filename-1, ~filename-1, ~1, ~1), lowerl = c(-Inf, 0, -Inf, -Inf, -Inf), upperl = c(Inf, 0.001, Inf, Inf, Inf)) return(drm_out) } LLPS_NTF2names &lt;- tribble(~NTF2name, ~NTF2, &quot;G3BP1-2Y&quot;, &quot;cH31YH62Y&quot;, &quot;G3BP1-H31A&quot;, &quot;bH31A&quot;, &quot;G3BP1-wt&quot;, &quot;aWT&quot;) LLPS_list &lt;- list.files(path = &quot;./data_LLPS&quot;, pattern = &quot;*&quot;, recursive = TRUE, include.dirs = TRUE, full.names = TRUE) LLPS_data.tib &lt;- as_tibble(LLPS_list) LLPS_coladd &lt;- tribble(~filename, ~datasetid, ~range, ~colnames, ~collection, as_tibble(c(&quot;LLPS_01.xlsx&quot;, &quot;LLPS_02.xlsx&quot;, &quot;LLPS_03.xlsx&quot;, &quot;LLPS_04.xlsx&quot;)), &quot;Sheet1&quot;, &quot;B5:G100&quot;, c(&quot;NTF2name&quot;, &quot;conc_uM&quot;, &quot;AreaOcc&quot;, &quot;AreaTot&quot;, &quot;Nobj&quot;, &quot;ImgN&quot;), &quot;MP1&quot;) LLPS_coladd &lt;- LLPS_coladd %&gt;% unnest(., filename) %&gt;% dplyr::mutate(., filename = value) %&gt;% dplyr::select(., !c(&quot;value&quot;)) LLPS_data_excel.tib &lt;- LLPS_data.tib %&gt;% separate(., value, into= c(&quot;dot&quot;, &quot;folder&quot;, &quot;filename&quot;), sep = &quot;/&quot;, remove = FALSE) %&gt;% left_join(., LLPS_coladd) %&gt;% dplyr::mutate(., data = purrr::pmap(list(value, datasetid, range, colnames), read_xlsx)) LLPS_data_analysis.tib &lt;- LLPS_data_excel.tib %&gt;% dplyr::select(., filename, data) %&gt;% unnest(., data) %&gt;% drop_na(., everything()) %&gt;% left_join(., LLPS_NTF2names) %&gt;% dplyr::group_by(., NTF2) %&gt;% dplyr::select(., !c(&quot;NTF2name&quot;)) %&gt;% nest() %&gt;% dplyr::mutate(., drm_out = purrr::map(data, ~drm_LLPS_f(.))) 3.2 LLPS condensate responses LLPS_filenames &lt;- LLPS_coladd %&gt;% dplyr::group_by(., filename) %&gt;% dplyr::summarize() %&gt;% pull() LLPS_predict_values &lt;- expand.grid(conc_uM =c(seq(0,30, 1)), filename = LLPS_filenames) LLPS_predict_values_augment &lt;- LLPS_predict_values %&gt;% as_tibble(.) drm_LLPS_predict_f &lt;- function(df){ data &lt;- df drm_predict &lt;- predict(data, LLPS_predict_values) %&gt;% as_tibble() drm_predict_out &lt;- LLPS_predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } LLPS_predict_norm_values &lt;- expand.grid(conc_uM =c(seq(0,30, 1))) drm_predict_LLPS_norm_f &lt;- function(df){ data &lt;- df drm_predict &lt;- predict(data, LLPS_predict_norm_values) %&gt;% as_tibble() drm_predict_out &lt;- LLPS_predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } combine_LLPS_pred_f &lt;- function(data, drm_pred){ data_groups &lt;- data %&gt;% dplyr::group_by(., filename) %&gt;% dplyr::summarize() drm_pred_out &lt;- drm_pred %&gt;% left_join(., data_groups) return(drm_pred_out) } LLPS_data_analysis_norm.tib &lt;- LLPS_data_analysis.tib %&gt;% dplyr::mutate(., drm_pred_temp = purrr::pmap(list(drm_out),drm_LLPS_predict_f)) %&gt;% dplyr::mutate(., drm_pred = purrr::pmap(list(data, drm_pred_temp),combine_LLPS_pred_f)) %&gt;% dplyr::mutate(., drm_tidy = purrr::pmap(list(drm_out),tidy)) LLPS_DR_bAS.plot &lt;- LLPS_data_analysis_norm.tib %&gt;% dplyr::mutate(., data_value = purrr::map(data, ~dplyr::mutate(., value = AreaOcc/AreaTot))) %&gt;% ggplot() + geom_line(data = . %&gt;% dplyr::select(., !c(&quot;data&quot;, &quot;drm_out&quot;)) %&gt;% unnest(., drm_pred), aes(x = conc_uM, y = value, colour = factor(filename)), size = 1 ) + geom_point(data = . %&gt;% dplyr::select(., !c(&quot;drm_out&quot;, &quot;drm_pred&quot;)) %&gt;% unnest(., data_value), aes(x = conc_uM, y = value, colour = factor(filename)), size = 2 ) + #geom_line(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% left_join(., SG_facets) %&gt;% left_join(., ncells_alpha_line) %&gt;% dplyr::filter(., ncell_cut &gt; 200), aes(x = GFPbin_number, y = value, colour = factor(colorgroup), group = plategroup), size = 0.5 ) + #geom_ribbon(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% dplyr::summarize(., ymin = min(value), ymax = (max(value))) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, ymin = ymin, ymax = ymax, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;SG area: %&quot;, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;c(G3BP)&quot;, n.breaks=4, minor_breaks = NULL) + theme_minimal() + #theme(legend.position = &quot;none&quot;) + scale_color_brewer(palette = &quot;Paired&quot;) + #scale_fill_npg() + facet_grid(. ~ NTF2) print(LLPS_DR_bAS.plot) ggsave(&quot;./LLPS_DR_bAS.jpeg&quot;, LLPS_DR_bAS.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./LLPS_DR_bAS.ps&quot;, LLPS_DR_bAS.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) LLPS condensate size versus concentration. Included DRC fits (line). 3.3 LLPS condensates normalized to wild-type LLPS_response_norm &lt;- LLPS_data_analysis_norm.tib %&gt;% dplyr::select(., NTF2, drm_tidy) %&gt;% unnest(., drm_tidy) %&gt;% dplyr::filter(., NTF2 == &quot;aWT&quot;, term == &quot;d&quot;) %&gt;% dplyr::select(., NTF2, curve, value = estimate) %&gt;% dplyr::mutate(., filename = str_replace(curve, &quot;filename&quot;, &quot;&quot;)) %&gt;% ungroup() %&gt;% dplyr::select(., !c(&quot;curve&quot;, &quot;NTF2&quot;)) %&gt;% dplyr::select(., norm = value, filename) LLPS_normalize_f &lt;- function(df){ df_out &lt;- df %&gt;% dplyr::mutate(., value_old = value) %&gt;% dplyr::select(., !c(&quot;value&quot;)) %&gt;% dplyr::mutate(., value = value_old/norm) %&gt;% return(df_out) } LLPS_DR_bAS_norm &lt;- LLPS_data_analysis_norm.tib %&gt;% dplyr::mutate(., data_value = purrr::map(data, ~dplyr::mutate(., value = AreaOcc/AreaTot))) %&gt;% dplyr::select(., NTF2, data = data_value) %&gt;% unnest(., data) %&gt;% left_join(., LLPS_response_norm) %&gt;% dplyr::group_by(., NTF2) %&gt;% nest() %&gt;% dplyr::mutate(., data_norm = purrr::pmap(list(data), LLPS_normalize_f)) LLPS_DR_bAS_norm.plot &lt;- LLPS_DR_bAS_norm %&gt;% ggplot() + #geom_line(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = GFPbin_number, y = value, colour = factor(plate)), size = 1 ) + geom_point(data = . %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm), aes(x = conc_uM, y = value, colour = factor(filename)), size = 2 ) + #geom_line(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% left_join(., SG_facets) %&gt;% left_join(., ncells_alpha_line) %&gt;% dplyr::filter(., ncell_cut &gt; 200), aes(x = GFPbin_number, y = value, colour = factor(colorgroup), group = plategroup), size = 0.5 ) + #geom_ribbon(data = SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp.preplot %&gt;% group_by(., NTF2, condition, colorgroup, GFPbin_number, name) %&gt;% dplyr::summarize(., ymin = min(value), ymax = (max(value))) %&gt;% left_join(., SG_facets), aes(x = GFPbin_number, ymin = ymin, ymax = ymax, fill = factor(colorgroup)), alpha = 0.25 ) + scale_y_continuous(&quot;normalized SG area&quot;, n.breaks = 3, minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;c(G3BP)&quot;, n.breaks = 3, minor_breaks = NULL) + theme_minimal() + #theme(legend.position = &quot;none&quot;) + scale_color_brewer(palette = &quot;Paired&quot;) + #scale_fill_npg() + facet_grid(. ~ NTF2) print(LLPS_DR_bAS_norm.plot) ggsave(&quot;./LLPS_DR_bAS_norm.jpeg&quot;, LLPS_DR_bAS_norm.plot, device = &quot;jpeg&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./LLPS_DR_bAS_norm.ps&quot;, LLPS_DR_bAS_norm.plot, device = &quot;ps&quot;, width = 160, height = 90, units = c(&quot;mm&quot;)) LLPS condensate size versus concentration, normalized to wild-type max response. 3.4 Fit to normalized data drm_norm_LLPS_f &lt;- function(df){ data &lt;- df drm_out &lt;- drm(value ~ conc_uM, filename, data = data, fct = L.5(), pmodels = list(~1, ~1, ~1, ~1, ~1), lowerl = c(-Inf, 0, -Inf, -Inf, -Inf), upperl = c(Inf, 0.01, Inf, Inf, Inf)) return(drm_out) } drm_predictnorm_LLPS_f &lt;- function(df, predict_values){ data &lt;- df drm_predict &lt;- predict(data, predict_values) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) return(drm_predict_out) } drm_predictnorm_LLPS_conf_f &lt;- function(df, predict_values){ data &lt;- df drm_predict &lt;- predict(data, predict_values, interval = &quot;confidence&quot;, vcov.dcr=sandwich) %&gt;% as_tibble() drm_predict_out &lt;- predict_values %&gt;% as_tibble() %&gt;% add_column(., drm_predict) %&gt;% dplyr::select(., !c(&quot;filename&quot;)) %&gt;% unique() return(drm_predict_out) } ###modify function #filter_data_f &lt;- function(data, filtername){ # data_out &lt;- data %&gt;% dplyr::mutate_at(c(&quot;plate&quot;), ~str_replace_all(., pattern = {{filtername}}, replacement = &quot;filterme&quot;)) %&gt;% dplyr::filter(., plate != &quot;filterme&quot;) # return(data_out) #} grid_predictvalues_LLPS_f &lt;- function(data){ filename &lt;- data %&gt;% dplyr::group_by(filename) %&gt;% dplyr::summarize() %&gt;% deframe() predict_values &lt;- expand.grid(conc_uM =c(seq(0,30, 1)), filename = filename) return(predict_values) } augment_f &lt;- function(df1, predict_values_augment){ data_out &lt;- df1 %&gt;% augment(., newdata = predict_values_augment, conf.int = TRUE) return(data_out) } ###apply right_join instead #filter_dataset &lt;- tribble(~NTF2, ~name, ~filtername, # &quot;cH31YH62Y&quot;, &quot;CaprinSGarea&quot;, &quot;plate21851|plate21852&quot;) LLPS_DR_bAS_norm_DRre &lt;- LLPS_DR_bAS_norm %&gt;% dplyr::mutate(., data_normOLD = data_norm) %&gt;% dplyr::select(., NTF2, data, data_normOLD, data_norm) %&gt;% dplyr::mutate(., predict_values = purrr::map(data_norm, ~grid_predictvalues_LLPS_f(.))) %&gt;% dplyr::mutate(., drm_out = purrr::pmap(list(data_norm),drm_norm_LLPS_f)) %&gt;% dplyr::mutate(., drm_pred_temp = purrr::pmap(list(drm_out, predict_values),drm_predictnorm_LLPS_f), drm_predconf_temp = purrr::pmap(list(drm_out, predict_values),drm_predictnorm_LLPS_conf_f)) %&gt;% dplyr::mutate(., drm_tidy = purrr::pmap(list(drm_out),tidy)) LLPS_DR_bAS_norm_DRre_conf.plot &lt;- ggplot() + geom_ribbon(data = LLPS_DR_bAS_norm_DRre %&gt;% dplyr::mutate_at(c(&quot;NTF2&quot;), ~str_replace_all(., &quot;aWT&quot;, &quot;aWildtype&quot;)) %&gt;% dplyr::mutate(., facetname = &quot;a.G3BP&quot;) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% inner_join(., colorgroup_join), aes(x = conc_uM, ymin = Lower, ymax = Upper, fill = factor(colorgroup)), alpha = 0.8) + geom_line(data = LLPS_DR_bAS_norm_DRre %&gt;% dplyr::mutate_at(c(&quot;NTF2&quot;), ~str_replace_all(., &quot;aWT&quot;, &quot;aWildtype&quot;)) %&gt;% dplyr::mutate(., facetname = &quot;a.G3BP&quot;) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;facetname&quot;, &quot;drm_predconf_temp&quot;)) %&gt;% unnest(., drm_predconf_temp) %&gt;% dplyr::mutate(., value = Prediction) %&gt;% inner_join(., colorgroup_join), aes(x = conc_uM, y = value, fill = factor(colorgroup), colour = factor(colorgroup)), size = 1 ) + #geom_point(data = SG_DR_bAS_norm %&gt;% left_join(., SG_facets) %&gt;% dplyr::select(., c(&quot;NTF2&quot;, &quot;condition&quot;, &quot;name&quot;, &quot;facetname&quot;, &quot;data_norm&quot;)) %&gt;% unnest(., data_norm) %&gt;% dplyr::filter(., NTF2 == &quot;aWildtype&quot;, condition == &quot;amock&quot;), aes(x = GFPbin_number, y = value, fill = factor(colorgroup), color = factor(colorgroup)), size = 0.5 ) + # + scale_y_continuous(&quot;normalized area&quot;, breaks = c(0,0.5,1), minor_breaks = NULL) + #breaks = c(0, 500, 1000)) + scale_x_continuous(&quot;c(G3BP1)&quot;, n.breaks = 5, minor_breaks = NULL) + coord_cartesian(ylim = c(0,1.5)) + #coord_cartesian(ylim(0,1.5)) + theme_minimal() + theme(legend.position = &quot;none&quot;) + #scale_color_brewer(palette = &quot;Paired&quot;) + scale_color_npg() + #scale_fill_manual(., values = npg_manual_scale) + scale_fill_npg() + facet_grid(facetname ~ .) print(LLPS_DR_bAS_norm_DRre_conf.plot) ggsave(&quot;./LLPS_DR_bAS_norm_DRre_conf.jpeg&quot;, LLPS_DR_bAS_norm_DRre_conf.plot, device = &quot;jpeg&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) ggsave(&quot;./LLPS_DR_bAS_norm_DRre_conf.ps&quot;, LLPS_DR_bAS_norm_DRre_conf.plot, device = &quot;ps&quot;, width = 60, height = 90, units = c(&quot;mm&quot;)) DRC fits to normalized LLPS condensate size versus concentration. With 95% confidence intervals. 4 Final plot mainPlot.plot &lt;- egg::ggarrange(SG_datasel_unnested_ntf2_sum_GFPi_filtered_exp_count.plot, LLPS_DR_bAS_norm_DRre_conf.plot, SG_DR_bAS_norm_DRre.plot, SG_DR_bAS_norm_DRre_conf.plot , nrow = 2, ncol = 2, heights = c(1,2), widths = c(4,1)) #(plotlist = list(), nrow = 1, ncol = 4, legend = &quot;none&quot;) ggsave(file=&quot;mainPlot.jpeg&quot;, plot=mainPlot.plot,device=&quot;jpeg&quot;, width = 200, height = 90, units = c(&quot;mm&quot;)) ggsave(file=&quot;mainPlot.ps&quot;, plot=mainPlot.plot,device=&quot;ps&quot;, width = 200, height = 90, units = c(&quot;mm&quot;)) ggsave(file=&quot;mainPlot.pdf&quot;, plot=mainPlot.plot,device=&quot;pdf&quot;, width = 200, height = 90, units = c(&quot;mm&quot;)) ggsave(file=&quot;mainPlot.svg&quot;, plot=mainPlot.plot,device=&quot;svg&quot;, width = 200, height = 90, units = c(&quot;mm&quot;)) Assembled figures for Figure 5. Plots were saved as postscript files, and edited into publication-quality figures using Adobe Illustrator. The bookdown document was created based on bookdown, and rtemps. Note that the echo = FALSE parameter was added to the code chunk to prevent printing of the R code that generated the plot. "]]
